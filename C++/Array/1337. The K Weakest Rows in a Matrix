class Solution {
public:
    
    vector<int> Weakest(vector<vector<int> >& mat, int k)
    {
        // no of rows;
        int n = mat.size();
        
        // set is to store pairs of count and index
        // count of 1 in ith row, {count,index};
        set<pair<int,int> > s;
        
        // set will automatically sort the pair {count, index} in ascending order.
        
        for(int i = 0; i<n; ++i)
        {
            // stl function for counting frequency of 1 in current row
            int cnt = count(mat[i].begin(),mat[i].end(),1);
            // inserting cnt and index pair to set
            s.insert({cnt,i});
        }
        
        vector<int> ans;
        // first k weakest row is our answer 
        for(auto i : s)
        {
            if(k == 0)
                break;
            ans.push_back(i.second);
            --k;
        }
        
        return ans;
    }
    
    
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {

        return Weakest(mat,k);
        
    }
	// for github repository link go to my profile.
};

/*USING PRIORITY QUEUE
ALGORITHM

Now look over priority_queue & binary search approach.
Create a Priority Queue which will contains pair of count of 1's and index.
Iterate each row of the given matrix and find no of soldiers using binary search.
All soldiers are at beginning i.e each row is sorted in descending order by default.
After finding no of soldier using binary search of current row, insert cnt of 1's and row index as a pair in priority queue.
if at any iteration priority queue (max_heap) becomes greater than k, pop the top pair. to maintain max size of priority queue as k and to maintain smaller indexes & cnt up.
now push pq.top().second i.e the index of k weakest rows.
Reverse the vector to have answer in lowest cnt to highest cnt of soldiers.
return ans.
*/
