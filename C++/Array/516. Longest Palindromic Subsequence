// DP Memorization
class Solution {
public:
    int Helper(string &s,string &rev,int i,int j,vector<vector<int>> &dp)
    {
        if(i==s.length())
        {
            return 0;
        }
        if(j==rev.length())
        {
            return 0;
        }
        int ans=0;
        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }
        if(s[i] == rev[j])
        {
            return  1+ Helper(s,rev,i+1,j+1,dp);
        }
        else{
            ans = max(Helper(s,rev,i+1,j,dp),Helper(s,rev,i,j+1,dp)); 
        }
        return dp[i][j] = ans;


    }
    int longestPalindromeSubseq(string s) {
        string rev = s;
        reverse(rev.begin(),rev.end());
        vector<vector<int>> dp(s.length(),vector<int>(rev.length(),-1));

       int ans = Helper(s,rev,0,0,dp);
       return ans;
    }
};
