class Solution {
public:
    bool caneat(int mid,vector<int>&piles,int givenhours)
    {
        long long hourstaken = 0;
        for(int i=0;i<piles.size();i++)
        {
            hourstaken +=  (piles[i]/mid);
            if(piles[i] % mid){
                hourstaken++;
            }
        }
        if(hourstaken <= givenhours )
        {
            return true;
        }
        return false;
    }
    int minEatingSpeed(vector<int>& piles, int h)
    {
         int low=1;   
         int high=*max_element(piles.begin(),piles.end());
         int ans=0;
         while(low<=high)
         {
            int mid = low+(high-low)/2;
            if(caneat(mid,piles,h))
            {
                ans=mid;
                high=mid-1; //left side
            }
            else{
                low=mid+1; //search in right side
            }
         }
         return ans;   
    }
};
