class Solution {
public:
    int dfs(vector<vector<int>> &grid, int i,int j, vector<vector<int>> &vis,int m,int n){
        if(i<0 || j<0 || i>=m || j>=n){
            return 0;
        }
        if(grid[i][j]==1 || vis[i][j]==1){
            return 1;
        }
        vis[i][j]=1;
        return (min(dfs(grid,i+1,j,vis,m,n),min(dfs(grid,i,j+1,vis,m,n),min(dfs(grid,i-1,j,vis,m,n),dfs(grid,i,j-1,vis,m,n)))));
    }
    int closedIsland(vector<vector<int>>& grid) {
        int ans=0;
        int m = grid.size();
        int n =grid[0].size();
        vector<vector<int>>vis(m,vector<int>(n,0));


        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0 && vis[i][j]!=1){
                    ans+=dfs(grid,i,j,vis, m, n);
                }
            }
        }
        return ans;


    }
};
