class Solution {
public:
    int minJumps(vector<int> &arr) {
        int n = arr.size();
        if (n == 1)return 0;
        unordered_map<int, vector<int>> mp;
        for (int i = 0; i < n; ++i) {
            mp[arr[i]].push_back(i);
        }
        vector<int> vis(n);
        queue<int> q;
        q.push(0);
        vis[0] = 1;
        int res = 0;
        while (!q.empty()) {
            int sz = q.size();
            while (sz--) {
                int x = q.front();
                q.pop();
                if (x == n - 1)return res;
                if (x + 1 < n && !vis[x + 1]) {
                    q.push(x + 1);
                    vis[x + 1] = 1;
                }
                if (x - 1 >= 0 && !vis[x - 1]) {
                    q.push(x - 1);
                    vis[x - 1] = 1;
                }
                for (int y: mp[arr[x]]) {
                    if (!vis[y]) {
                        q.push(y);
                        vis[y] = 1;
                    }
                }
                mp[arr[x]].clear();
            }
            ++res;
        }
        return 0;
    }
};
