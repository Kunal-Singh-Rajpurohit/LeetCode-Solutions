/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int searchPos(vector<int>& inorder,int start,int end,int curr){
        for(int i=start;i<=end;i++){
            if(inorder[i]==curr){
                return i;
            }
        }
        return -1;
    }
    TreeNode* BuildTree(vector<int>& inorder, vector<int>& postorder,int start ,int end,int &indx){
        if( start>end ){
            return NULL;
        }
        int curr= postorder[indx];
        indx--;
        TreeNode* root=new TreeNode(curr);
        if (start==end){
            return root;
        }
        int pos=searchPos(inorder,start,end,curr);
        root->right=BuildTree(inorder,postorder,pos+1,end,indx);
        root->left=BuildTree(inorder,postorder,start,pos-1,indx);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int indx=postorder.size()-1;
        return BuildTree(inorder,postorder,0,inorder.size()-1,indx);
    }
};
